# Generated by Django 5.2.5 on 2025-08-12 06:33

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('color', models.CharField(default='#3B82F6', max_length=7)),
                ('usage_frequency', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['-usage_frequency', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContextEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Raw content from the source')),
                ('source_type', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('email', 'Email'), ('note', 'Manual Note'), ('calendar', 'Calendar'), ('meeting', 'Meeting Notes')], max_length=20)),
                ('timestamp', models.DateTimeField(help_text='When this context was created/received')),
                ('processed_insights', models.JSONField(default=dict, help_text='AI-extracted insights and metadata from the content')),
                ('relevance_score', models.FloatField(default=0.0, help_text='How relevant this context is for task prioritization', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'context entries',
                'ordering': ['-timestamp', '-relevance_score'],
                'indexes': [models.Index(fields=['source_type', '-timestamp'], name='tasks_conte_source__578b23_idx'), models.Index(fields=['-relevance_score'], name='tasks_conte_relevan_422c34_idx')],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('done', 'Done')], default='todo', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('priority_score', models.FloatField(default=50.0, help_text='AI-calculated priority score from 0-100', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('enhanced_description', models.TextField(blank=True, help_text='AI-enhanced version of the description')),
                ('suggested_deadline', models.DateTimeField(blank=True, help_text='AI-suggested deadline based on context', null=True)),
                ('ai_insights', models.JSONField(default=dict, help_text='AI-generated insights and metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='tasks.category')),
            ],
            options={
                'ordering': ['-priority_score', '-created_at'],
                'indexes': [models.Index(fields=['status', '-priority_score'], name='tasks_task_status_0cc913_idx'), models.Index(fields=['category', 'status'], name='tasks_task_categor_55ce6c_idx'), models.Index(fields=['-created_at'], name='tasks_task_created_5da2cb_idx')],
            },
        ),
    ]
